openapi: 3.0.0
info:
  title: Feature toggle server
  description: API for manging feature toggles
  version: 0.1.0
  contact: {}
tags:
  - name: Applications
    description: Methods for managing applications
  - name: Features
    description: Methods for managing features
  - name: Users
    description: Methods for managing users
  - name: Auth
    description: Methods for users' authentication
  - name: Roles
    description: Methods for managing users' roles
servers:
  - url: 'http://localhost:3000'
    description: development server
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    SwaggerPermission:
      type: object
      properties:
        action:
          type: string
          description: Action
          enum:
            - create
            - read
            - update
            - delete
          example: read
        subject:
          type: string
          description: The subject
        isAllowed:
          type: boolean
          description: Is the action allowed with the subject
      required:
        - action
        - subject
        - isAllowed
    UserCurrent:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
          x-faker: internet.userName
        permissions:
          description: Permissions
          x-featurist: permissions
          type: array
          items:
            $ref: '#/components/schemas/SwaggerPermission'
      required:
        - username
        - permissions
    UserCurrentResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserCurrent'
      required:
        - data
    User:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier
          x-faker: random.uuid
        createdAt:
          format: date-time
          type: string
          description: The date of the creation
          x-faker: date.past
        updatedAt:
          format: date-time
          type: string
          description: The date of the last update
          x-faker: date.recent
        username:
          type: string
          description: The username of the user
          x-faker: internet.userName
        isActive:
          type: boolean
          description: Is user active
        roleId:
          type: string
          description: The id of the role the user belongs to
          x-faker: random.uuid
      required:
        - id
        - createdAt
        - updatedAt
        - username
        - isActive
        - roleId
    UsersListResponse:
      type: object
      properties:
        total:
          type: number
          example: 10
          description: The total amount of entities
        data:
          description: The list of entitites
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - total
        - data
    CrudErrorResponse:
      type: object
      properties:
        statusCode:
          type: number
          example: 400
          description: HTTP status code
        message:
          description: The list of error messages
          oneOf:
            - type: string
              example: value must not be empty
            - type: array
              items:
                type: string
          items:
            type: string
        error:
          type: string
          description: Error message
          example: Bad Request
      required:
        - statusCode
        - message
    CreateUserDto:
      type: object
      properties:
        username:
          type: string
          example: someusername
          description: The username of a new user
        password:
          type: string
          example: somePassword
          description: The password of a new user
        roleId:
          type: string
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          description: The role id of a new user
      required:
        - username
        - password
        - roleId
    UserSingleResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'
      required:
        - data
    UpdateUserDto:
      type: object
      properties:
        password:
          type: string
          example: somePassword
          description: User password
        roleId:
          type: string
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          description: The role id of a new user
      required:
        - password
        - roleId
    Feature:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier
          x-faker: random.uuid
        createdAt:
          format: date-time
          type: string
          description: The date of the creation
          x-faker: date.past
        updatedAt:
          format: date-time
          type: string
          description: The date of the last update
          x-faker: date.recent
        name:
          type: string
          description: The name of the feature
          x-faker: git.branch
        description:
          type: string
          description: The description of the feature
          x-faker: hacker.phrase
        isEnabled:
          type: boolean
          description: Is feature enabled
        applicationId:
          type: string
          description: The id of the application the feature belongs to
          x-faker: random.uuid
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - description
        - isEnabled
        - applicationId
    FeaturesListResponse:
      type: object
      properties:
        total:
          type: number
          example: 10
          description: The total amount of entities
        data:
          description: The list of entitites
          type: array
          items:
            $ref: '#/components/schemas/Feature'
      required:
        - total
        - data
    CreateFeatureDto:
      type: object
      properties:
        name:
          type: string
          example: feature-name
          description: The name of a new feature
        description:
          type: string
          example: Feature description
          description: The description of a new feature
      required:
        - name
        - description
    FeatureSingleResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Feature'
      required:
        - data
    UpdateFeatureDto:
      type: object
      properties:
        description:
          type: string
          example: Feature description
          description: The description of the feature
        isEnabled:
          type: boolean
          example: Is feature enabled
          description: Is feature enabled
      required:
        - description
        - isEnabled
    Application:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier
          x-faker: random.uuid
        createdAt:
          format: date-time
          type: string
          description: The date of the creation
          x-faker: date.past
        updatedAt:
          format: date-time
          type: string
          description: The date of the last update
          x-faker: date.recent
        name:
          type: string
          description: The name of the application
          x-faker: git.branch
        description:
          type: string
          description: The description of the application
          x-faker: hacker.phrase
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - description
    ApplicationsListResponse:
      type: object
      properties:
        total:
          type: number
          example: 10
          description: The total amount of entities
        data:
          description: The list of entitites
          type: array
          items:
            $ref: '#/components/schemas/Application'
      required:
        - total
        - data
    ApplicationSingleResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Application'
      required:
        - data
    CreateApplicationDto:
      type: object
      properties:
        name:
          type: string
          example: Application name
          description: The name of a new application
        description:
          type: string
          example: Application description
          description: The description of a new application
      required:
        - name
        - description
    UpdateApplicationDto:
      type: object
      properties:
        name:
          type: string
          example: Application name
          description: The name of the application
        description:
          type: string
          example: Application description
          description: The description of the application
    AuthLoginDto:
      type: object
      properties:
        username:
          type: string
          example: admin
          description: Username
        password:
          type: string
          example: test
          description: Password
      required:
        - username
        - password
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: Access token
          x-faker: internet.password
      required:
        - access_token
    AuthLoginResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/LoginResponse'
      required:
        - data
    Role:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier
          x-faker: random.uuid
        createdAt:
          format: date-time
          type: string
          description: The date of the creation
          x-faker: date.past
        updatedAt:
          format: date-time
          type: string
          description: The date of the last update
          x-faker: date.recent
        name:
          type: string
          description: The name of the application
          x-faker: git.branch
        description:
          type: string
          description: The description of the application
          x-faker: hacker.phrase
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - description
    RolesListResponse:
      type: object
      properties:
        total:
          type: number
          example: 10
          description: The total amount of entities
        data:
          description: The list of entitites
          type: array
          items:
            $ref: '#/components/schemas/Role'
      required:
        - total
        - data
    RoleSingle:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier
          x-faker: random.uuid
        createdAt:
          format: date-time
          type: string
          description: The date of the creation
          x-faker: date.past
        updatedAt:
          format: date-time
          type: string
          description: The date of the last update
          x-faker: date.recent
        name:
          type: string
          description: The name of the application
          x-faker: git.branch
        description:
          type: string
          description: The description of the application
          x-faker: hacker.phrase
        permissions:
          description: Permissions
          x-featurist: permissions
          type: array
          items:
            $ref: '#/components/schemas/SwaggerPermission'
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - description
        - permissions
    RoleSingleResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/RoleSingle'
      required:
        - data
    CreateRoleDto:
      type: object
      properties:
        name:
          type: string
          example: Role name
          description: The name of a new role
        description:
          type: string
          example: Role description
          description: The description of a new role
      required:
        - name
        - description
    UpdateRoleDto:
      type: object
      properties:
        name:
          type: string
          example: Role name
          description: The name of the role
        description:
          type: string
          example: Role description
          description: The description of the role
paths:
  /admin/v1/users/me:
    get:
      operationId: getCurrentUser
      summary: Get current user
      parameters: []
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCurrentResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Users
      security:
        - bearer: []
  /admin/v1/users:
    get:
      operationId: getUsers
      summary: Find users by params
      parameters:
        - name: offset
          required: false
          in: query
          description: The number of items to skip
          schema:
            minimum: 0
            format: int32
            default: 0
            type: number
        - name: limit
          required: false
          in: query
          example: 10
          description: The number of items to return
          schema:
            minimum: 1
            format: int32
            default: 10
            type: number
        - name: search
          required: false
          in: query
          description: The search string by which items should be searched
          schema:
            type: string
        - name: createdFrom
          required: false
          in: query
          example: '2020-09-09'
          description: The start of the creation date range
          schema:
            format: date
            type: string
        - name: createdTo
          required: false
          in: query
          description: The end of the creation date range
          schema:
            format: date
            type: string
        - name: updatedFrom
          required: false
          in: query
          example: '2020-09-09'
          description: The start of the updating date range
          schema:
            format: date
            type: string
        - name: updatedTo
          required: false
          in: query
          description: The end of the updating date range
          schema:
            format: date
            type: string
        - name: sortBy
          required: false
          in: query
          example: createdAt
          description: The field by which the result should be ordered
          schema:
            default: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          example: desc
          description: The sort derection
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
      responses:
        '200':
          description: List of found users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Users
      security:
        - bearer: []
    post:
      operationId: createUser
      summary: Create user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Users
      security:
        - bearer: []
  '/admin/v1/users/{id}':
    get:
      operationId: getUser
      summary: Get user by id
      parameters:
        - name: id
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              example:
                statusCode: 404
                message: Entity does not exist
                error: Not Found
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Users
      security:
        - bearer: []
    put:
      operationId: updateUser
      summary: Update user
      parameters:
        - name: id
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              example:
                statusCode: 404
                message: Entity does not exist
                error: Not Found
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Users
      security:
        - bearer: []
    delete:
      operationId: deleteUser
      summary: Delete user
      parameters:
        - name: id
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
      responses:
        '200':
          description: Deleted user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              example:
                statusCode: 404
                message: Entity does not exist
                error: Not Found
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Users
      security:
        - bearer: []
  '/admin/v1/applications/{appId}/features':
    get:
      operationId: getFeatures
      summary: Find features by params
      parameters:
        - name: appId
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
        - name: offset
          required: false
          in: query
          description: The number of items to skip
          schema:
            minimum: 0
            format: int32
            default: 0
            type: number
        - name: limit
          required: false
          in: query
          example: 10
          description: The number of items to return
          schema:
            minimum: 1
            format: int32
            default: 10
            type: number
        - name: search
          required: false
          in: query
          description: The search string by which items should be searched
          schema:
            type: string
        - name: createdFrom
          required: false
          in: query
          example: '2020-09-09'
          description: The start of the creation date range
          schema:
            format: date
            type: string
        - name: createdTo
          required: false
          in: query
          description: The end of the creation date range
          schema:
            format: date
            type: string
        - name: updatedFrom
          required: false
          in: query
          example: '2020-09-09'
          description: The start of the updating date range
          schema:
            format: date
            type: string
        - name: updatedTo
          required: false
          in: query
          description: The end of the updating date range
          schema:
            format: date
            type: string
        - name: sortBy
          required: false
          in: query
          example: createdAt
          description: The field by which the result should be ordered
          schema:
            default: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          example: desc
          description: The sort derection
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
      responses:
        '200':
          description: The list of found features
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeaturesListResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              example:
                statusCode: 404
                message: Entity does not exist
                error: Not Found
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Features
      security:
        - bearer: []
    post:
      operationId: createFeature
      summary: Create feature
      parameters:
        - name: appId
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFeatureDto'
      responses:
        '201':
          description: Created feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              example:
                statusCode: 404
                message: Entity does not exist
                error: Not Found
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Features
      security:
        - bearer: []
  '/admin/v1/applications/{appId}/features/{id}':
    get:
      operationId: getFeature
      summary: Get feature by id
      parameters:
        - name: appId
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
      responses:
        '200':
          description: Feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              example:
                statusCode: 404
                message: Entity does not exist
                error: Not Found
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Features
      security:
        - bearer: []
    put:
      operationId: updateFeature
      summary: Update feature
      parameters:
        - name: appId
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFeatureDto'
      responses:
        '200':
          description: Updated feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              example:
                statusCode: 404
                message: Entity does not exist
                error: Not Found
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Features
      security:
        - bearer: []
    delete:
      operationId: deleteFeature
      summary: Delete feature
      parameters:
        - name: appId
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
      responses:
        '200':
          description: Deleted feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              example:
                statusCode: 404
                message: Entity does not exist
                error: Not Found
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Features
      security:
        - bearer: []
  '/admin/v1/applications/{appId}/features/{id}/enable':
    post:
      operationId: enableFeature
      summary: Enable feature
      parameters:
        - name: appId
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
      responses:
        '200':
          description: Enabled feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              example:
                statusCode: 404
                message: Entity does not exist
                error: Not Found
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Features
      security:
        - bearer: []
  '/admin/v1/applications/{appId}/features/{id}/disable':
    post:
      operationId: disableFeature
      summary: Disable feature
      parameters:
        - name: appId
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
      responses:
        '200':
          description: Disabled feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              example:
                statusCode: 404
                message: Entity does not exist
                error: Not Found
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Features
      security:
        - bearer: []
  /admin/v1/applications:
    get:
      operationId: getApplications
      summary: Find applications by params
      parameters:
        - name: offset
          required: false
          in: query
          description: The number of items to skip
          schema:
            minimum: 0
            format: int32
            default: 0
            type: number
        - name: limit
          required: false
          in: query
          example: 10
          description: The number of items to return
          schema:
            minimum: 1
            format: int32
            default: 10
            type: number
        - name: search
          required: false
          in: query
          description: The search string by which items should be searched
          schema:
            type: string
        - name: createdFrom
          required: false
          in: query
          example: '2020-09-09'
          description: The start of the creation date range
          schema:
            format: date
            type: string
        - name: createdTo
          required: false
          in: query
          description: The end of the creation date range
          schema:
            format: date
            type: string
        - name: updatedFrom
          required: false
          in: query
          example: '2020-09-09'
          description: The start of the updating date range
          schema:
            format: date
            type: string
        - name: updatedTo
          required: false
          in: query
          description: The end of the updating date range
          schema:
            format: date
            type: string
        - name: sortBy
          required: false
          in: query
          example: createdAt
          description: The field by which the result should be ordered
          schema:
            default: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          example: desc
          description: The sort derection
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
      responses:
        '200':
          description: The list of found applications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationsListResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Applications
      security:
        - bearer: []
    post:
      operationId: createApplication
      summary: Create application
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationDto'
      responses:
        '201':
          description: Created application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Applications
      security:
        - bearer: []
  '/admin/v1/applications/{id}':
    get:
      operationId: getApplication
      summary: Get application by id
      parameters:
        - name: id
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
      responses:
        '200':
          description: Application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              example:
                statusCode: 404
                message: Entity does not exist
                error: Not Found
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Applications
      security:
        - bearer: []
    put:
      operationId: updateApplication
      summary: Update application
      parameters:
        - name: id
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApplicationDto'
      responses:
        '200':
          description: Updated application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              example:
                statusCode: 404
                message: Entity does not exist
                error: Not Found
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Applications
      security:
        - bearer: []
    delete:
      operationId: deleteApplication
      summary: Delete application
      parameters:
        - name: id
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
      responses:
        '200':
          description: Deleted application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              example:
                statusCode: 404
                message: Entity does not exist
                error: Not Found
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Applications
      security:
        - bearer: []
  /admin/v1/auth/login:
    post:
      operationId: login
      summary: Login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginDto'
      responses:
        '200':
          description: Access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLoginResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Auth
  /admin/v1/roles:
    get:
      operationId: getRoles
      summary: Find roles by params
      parameters:
        - name: offset
          required: false
          in: query
          description: The number of items to skip
          schema:
            minimum: 0
            format: int32
            default: 0
            type: number
        - name: limit
          required: false
          in: query
          example: 10
          description: The number of items to return
          schema:
            minimum: 1
            format: int32
            default: 10
            type: number
        - name: search
          required: false
          in: query
          description: The search string by which items should be searched
          schema:
            type: string
        - name: createdFrom
          required: false
          in: query
          example: '2020-09-09'
          description: The start of the creation date range
          schema:
            format: date
            type: string
        - name: createdTo
          required: false
          in: query
          description: The end of the creation date range
          schema:
            format: date
            type: string
        - name: updatedFrom
          required: false
          in: query
          example: '2020-09-09'
          description: The start of the updating date range
          schema:
            format: date
            type: string
        - name: updatedTo
          required: false
          in: query
          description: The end of the updating date range
          schema:
            format: date
            type: string
        - name: sortBy
          required: false
          in: query
          example: createdAt
          description: The field by which the result should be ordered
          schema:
            default: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          example: desc
          description: The sort derection
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
      responses:
        '200':
          description: The list of found roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesListResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Roles
      security:
        - bearer: []
    post:
      operationId: createRole
      summary: Create role
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleDto'
      responses:
        '201':
          description: Created role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Roles
      security:
        - bearer: []
  '/admin/v1/roles/{id}':
    get:
      operationId: getRole
      summary: Get role by id
      parameters:
        - name: id
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
      responses:
        '200':
          description: Role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              example:
                statusCode: 404
                message: Entity does not exist
                error: Not Found
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Roles
      security:
        - bearer: []
    put:
      operationId: updateRole
      summary: Update role
      parameters:
        - name: id
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleDto'
      responses:
        '200':
          description: Updated role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              example:
                statusCode: 404
                message: Entity does not exist
                error: Not Found
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Roles
      security:
        - bearer: []
    delete:
      operationId: deleteRole
      summary: Delete role
      parameters:
        - name: id
          required: true
          in: path
          example: 977a3934-ee5f-4a6f-beed-42a7529ce648
          schema:
            type: string
      responses:
        '200':
          description: Deleted role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleSingleResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              example:
                statusCode: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: Forbidden resource
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              example:
                statusCode: 404
                message: Entity does not exist
                error: Not Found
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                statusCode: 500
                message: Internal server error
              schema:
                $ref: '#/components/schemas/CrudErrorResponse'
      tags:
        - Roles
      security:
        - bearer: []
